package pl.s15778.tau.candle.dao;

import static org.junit.Assert.*;

import org.junit.*;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import pl.s15778.tau.candle.domain.Candle;
import java.sql.*;
import static org.hamcrest.CoreMatchers.*;

import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

@RunWith(JUnit4.class)
public class CandleDaoTest {
    private static final Logger LOGGER = Logger.getLogger(CandleDaoTest.class.getCanonicalName());

    @Rule
    public Timeout globalTimeout = new Timeout(10000);

    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    CandleDao candleManager;
    List<Candle> expectedDbState;

    @Before
    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.createStatement()
                .executeUpdate("CREATE TABLE " + "Candle(id bigint GENERATED BY DEFAULT AS IDENTITY, " + "name varchar(20) NOT NULL, " + "company varchar(30) NOT NULL" + "cbt integer)");
        } catch (SQLException e) {}

        Random rand = new Random();
        PreparedStatement addCandleStmt = connection.prepareStatement(
            "INSERT INTO Candle (name, company, cbt) VALUES (?, ?, ?)",
            Statement.RETURN_GENERATED_KEYS);
        
        expectedDbState = new LinkedList<Candle>();
        for (int i = 0; i < 10; i++) {
            Candle candle = new Candle("MATATA" + rand.nextInt(1000), "AJAX" + rand.nextInt(1000), 1000 + rand.nextInt(1000));
            try{
                addCandleStmt.setString(1, candle.getName());
                addCandleStmt.setString(2, candle.getCompany());
                addCandleStmt.setInt(3, candle.getCbt());
                addCandleStmt.executeUpdate();
                ResultSet generatedKeys = addCandleStmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    candle.setId(generatedKeys.getLong(1));
                }
            } catch (SQLException e) {
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }

            expectedDbState.add(candle);
        }
        candleManager = new CandleDaoJdbcImpl(connection);

    }

@After
public void cleanup() throws SQLException {
    Connection connection = DriverManager.getConnection(url);
    try {
        connection.prepareStatement("DELETE FROM Candle").executeUpdate();
    } catch (Exception e) {
        LOGGER.log(Level.FINEST,"Probably the database was not yet initialized");
    }    
}

@Test
public void checkAdding() throws Exception {
    Candle candle = new Candle();
    candle.setName("Lawendowe wzgorza");
    candle.setCompany("DRUTEX");
    candle.setCbt(30);

    assertEquals(1, candleManager.addCandle(candle));

    expectedDbState.add(candle);
    assertThat(candleManager.getAllCandles(), equalTo(expectedDbState));
}

@Test
public void checkGetting() throws Exception {
    Candle candle = expectedDbState.get(7);
    assertEquals(candle, candleManager.getCandle(candle.getId()));
}

@Test(expected = SQLException.class)
public void checkDeleting() throws SQLException {
    Candle c = expectedDbState.get(3);
    expectedDbState.remove(c);
    assertEquals(1, candleManager.deleteCandle(c));
    assertThat(candleManager.getAllCandles(), equalTo(expectedDbState));
    assertNull(candleManager.getCandle(c.getId()));
}

@Test
public void checkUpdatingSuccess() throws SQLException {
    Candle c = expectedDbState.get(3);
    c.setName("Lody waniliowe");
    expectedDbState.set(3, c);
    assertEquals(1, candleManager.updateCandle(c));
    assertThat(candleManager.getAllCandles(), equalTo(expectedDbState));
}

@Test(expected = SQLException.class)
public void checkUpdatingFailure() throws SQLException {
    Candle c = new Candle("Mango","Pronto", 123);
    assertEquals(1, candleManager.updateCandle(c));
}
}












